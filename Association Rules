###########################################
# Association Rules Analysis
# ---------------------------------
# Created by  : Adam Nguyen
# Updated by  : Adam Nguyen
# Created at  : 05/01/2014
# Updated at  : xx/xx/xxxx
# Description : Purchasing Pathway Analysis
###########################################
#Supporting sources: http://blog.safaribooksonline.com/2014/03/31/mastering-parallel-coordinate-charts-r/

#Clear Environment
#rm(list = ls(all = TRUE))
#update.packages(ask = FALSE, dependencies = c('Suggests'))

#Names of working directory and files
myfolder <- "C:/Users/adam.nguyen/Desktop/teradataR/"

#Set Directory
setInternet2(TRUE)
Sys.setenv(language = "en", tz = 'UTC')
options(max.print = 2000)
setwd(myfolder)
source(paste(c("C:/Users/adam.nguyen/Desktop/GH/", "library.R"), collapse = "")) #Get library
source(paste(c("C:/Users/adam.nguyen/Desktop/GH/", "break_munging.txt"), collapse = "")) #Get tools

#Load Project Specific libraries
library(arules)
library(arulesViz)

#Establish Teradata Connection
#RShowDoc(“teradataR”, package = “teradataR”) 
Teradata.Connect <- tdConnect("Teradata2750")

#Query Teradata via R
data <- tdQuery("sel * from table sample 100000")

#Data Sanity Checks
dim(data)
#td.values(as.td.data.frame(data), gms) #Assess data integrity
summary(data) #Summarize data

#Remove identify features
data.var <- data[, -c(1:3)]
data.rep <- apply(data.var, 1:2, function(x) ifelse(x > 0, 1, 0))
names(data.rep) <- names(data.var)
length(data.var)
#Check for target action density
#length(data.var[which(data.var$ACT_CART_OPEN > 0), ]) / nrow(data.var)

#Implement rules
data.rules <- apriori(data.rep
						, parameter = list(supp = 0.01
							, conf = 0.75
							, minlen = 2
							, maxlen = 6
							, target = "rules")
						, appearance = list(rhs = "ACT_CART_OPEN"
							, default = "lhs")
						)

#Sort and Inspect rules
data.rules
data.sorted <- sort(data.rules, by = c("lift"))
#inspect(data.sorted)

#Plot regular rules
#plot(data.sorted)

#Prune redundant rules
data.subset <- is.subset(data.sorted, data.sorted)
data.subset[lower.tri(data.subset, diag = T)] <- NA
data.redundant <- colSums(data.subset, na.rm = T) >= 1
which(data.redundant)
data.pruned <- data.sorted[!data.redundant]
inspect(data.pruned)

#Replot pruned rules
plot(data.pruned)

#Plot Methods Chart
plot(data.pruned, method = "graph", control = list(type = "items"))

#Plot Parallel Coordinates
plot(data.pruned, method = "paracoord", control = list(reorder = FALSE))
